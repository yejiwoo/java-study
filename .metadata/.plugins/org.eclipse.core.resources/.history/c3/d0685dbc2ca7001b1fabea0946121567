package ch03;

public class Main {

	static void SignOperationExample() {
		int x=-100;
		int result1=+x;  // +x는 x와 같다. 따라서 -100
		int result2=-x;  // 100
		System.out.println("result1: "+result1);  //-100
		System.out.println("result2: "+result2);	//100
		
		short s=100;
		//short result3= -s; // 컴파일 에러. 왜냐하면 부호연산자의 산출 타입은 int
		int result3=-s;
		System.out.println("result3: "+result3);	//-100
	}
	
	static void increaseDecreaseOperatorExample() {
		int x=10;
		int y=10;
		int z;
		
		System.out.println("-----------------");
		x++;
		++x;
		System.out.println("x= "+x);	//12
		
		System.out.println("-----------------");
		y--;--y;
		System.out.println("y= "+y);	//8
		
		System.out.println("-----------------");
		z= x++;
		System.out.println("z= "+z);	//12
		System.out.println("x= "+x);	//13
		
		System.out.println("-------------------");
		z=++x;
		System.out.println("z= "+z);	//14
		System.out.println("x= "+x);	//12
		
		System.out.println("-------------------");
		z=++x + y++;
		System.out.println("z= "+z);	// 23
		System.out.println("x= "+x);	//15
		System.out.println("y= "+y);	//9
		
	}
	
	static void ArithmeticOperatorExample(){
		int v1=5;
		int v2=2;
		
		int result1=v1+v2;
		System.out.println("result1= "+result1);	//7
		
		int result2 = v1-v2;
		System.out.println("result2"+result2);	//3
		
		int result3 = v1*v2;
		System.out.println("result3"+result3);	//10
		
		int result4=v1/v2;
		System.out.println("result4"+result4); 	//2
		
		int result5=v1%v2;
		System.out.println("result5"+result5);	//1
		
		double result6=(double)v1/v2;
		System.out.println("result6"+result6);	//2.5
	}
	
	static void OverflowExample() {
		int x =1000000;
		int y=1000000;
		int z= x*y;
		System.out.println(z);	//-7237379968
		
		long x2=1000000;
		long y2=1000000;
		long z2=x2*y2;
		
		System.out.println(z2);	//1000000000000
	}
	
	static int safeAdd(int left, int right) {
		if(right>0) {
			if(left > Integer.MAX_VALUE - right) {
				throw new ArithmeticException("오버플로우 발생");
			}
		}
		else{
			if(left < Integer.MIN_VALUE - right) {
				throw new ArithmeticException("오버플로우 발생");
			}
		}
		return left+right;
	}
	static void CheckoverflowExample() {
		try {
			int result=safeAdd(2000000000, 2000000000);
			System.out.println(result);
		}catch(ArithmeticException e) {
			System.out.println("오버플로우가 발생하여 정확하게 게산할 수 없음.");
		}
	}
	
	static void AccuracyExample1() {
		int apple =1 ;
		double pieceUnit = 0.1;
		int number=7;
		
		double result=apple - number * pieceUnit;
		System.out.println(number*pieceUnit);
		System.out.println("사과 한 개에서 0.7 조각을 빼면\n"+result+"조각이 남는다.");	//0.29999999999993
	}
	
	static void AccuracyExample2() {
		int apple=1;
		
		int totalPieces=apple*10;
		int number=7;
		int temp=totalPieces - number;
		
		double result=temp/10.;
		
		System.out.println("사과 한 개에서 0.7 조각을 빼면\n"+result+"조각이 남는다.");	//0.3
	}
	
	static void CharOperationExample() {
		char c1='A' +1;
		char c2='A';
		//char c3 = c2+1;	// 컴파일 에러
		System.out.println("c1= "+c1);	//B
		System.out.println("c2= "+c2);	//A
		
	}
	
	static void StringConcatExample() {
		String str1="JDK"+6.0;
		String str2=str1+"특징";
		System.out.println(str2);	//JDK6.0특징
		
		String str3="JDK"+3+3.0;
		String str4=3+3.0+"JDK";
		System.out.println(str3);	// JDK33.0
		System.out.println(str4);	// 6.0JDK
		
	}
	static void CompareOperatorExample2() {
		int v2=1;
		double v3=1.0;
		System.out.println(v2==v3);	// true: int타입인 3을 보다 큰 타입인 double타입으로 변환한 다음 비교
		
		double v4=0.1;
		float v5=0.1f;
		System.out.println(v4==v5);		// false: 부동소수점 타입은 0.1을 정확히 표현할 수 없어서 0.1f는 0.1의 근사값으로 표현 된다.
		System.out.println((float)v4==v5);		//true
		System.out.println((int)v4*10 == (int)v5*10);	//true
		System.out.println((int)v4 == (int)v5);		//true
	}
	
	static void StringEqualsExample() {
		String str1="신민철";
		String str2="신민철";
		String str3= new String("신민철");
		
		System.out.println(str1==str2);
		System.out.println(str1==str3);
		System.out.println();
		System.out.println(str1.equals(str2));
		System.out.println(str1.equals(str2));
		
		System.out.println("str1메모리주소"+System.identityHashCode(str1));
		System.out.println("str2메모리주소"+System.identityHashCode(str2));
		System.out.println("str3메모리주소"+System.identityHashCode(str3));
		System.out.println("str1.hashCode()"+str1.hashCode());
		System.out.println("str2.hashCode()"+str2.hashCode());
		System.out.println("str3.hashCode()"+str3.hashCode());
	}
	public static void main(String[] args) {

//		SignOperationExample();
//		increaseDecreaseOperatorExample();
//		ArithmeticOperatorExample();
//		CheckoverflowExample();
//		AccuracyExample1();
//		AccuracyExample2();
//		StringConcatExample();
//		CompareOperatorExample2();
		StringEqualsExample();
	}

}
